{"componentChunkName":"component---src-templates-blog-post-js","path":"/Git-helper/","result":{"data":{"site":{"siteMetadata":{"title":"Koushik's scribble"}},"markdownRemark":{"id":"2fedfe74-285d-5c95-94cb-94393584d23e","excerpt":"git Scenarios master and release, only certain files/folder Customer has multiple leading branches, yes not good practice but still they survive.   branch hasâ€¦","html":"<!-- Post Content -->\n<br/>\n<h2>git Scenarios</h2>\n<h3>master and release, only certain files/folder</h3>\n<p>Customer has multiple leading branches, yes not good practice but still they survive. </p>\n<p><code class=\"language-text\">master</code> branch has all kinds of files, but <code class=\"language-text\">release</code> requires only selected folder. Development is all done from master derived branches. Therefore reviews and merges are focused under master. </p>\n<p><code class=\"language-text\">git cherry-pick</code> in action, perfect and invaluable to help isolate specific commits. </p>\n<p>steps to do:</p>\n<ol>\n<li>Create new branch from <code class=\"language-text\">master</code> and develop all changes. Follow good practices to do commits.</li>\n<li>Create Pull Request and merge changes to <code class=\"language-text\">master</code>. Locally, get latest <code class=\"language-text\">master</code> now including the merged changes. </li>\n<li>\n<p>Using <code class=\"language-text\">git log</code> get the latest log. Find the merge done in second step. Below is a sample log message from the merge. Notice the commit which will be used next.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">commit cf23e3333c222ea40adbb2d2da111b05a00f2f4e (HEAD -> master, DevelopmentRepo/master)\nMerge: 07dc8373c bca29fc4a\nAuthor: Koushik Aravalli &lt;koushik.aravalli@.com>\nDate:   Thu May 27 13:11:13 2021 +0000\n\nMerged PR 62636: My pullrequest merge message\n\nMy commit messages\n\nRelated work items: #224345</code></pre></div>\n</li>\n<li>Create new branch from <code class=\"language-text\">release</code> and checkout locally the new branch. </li>\n<li>\n<p>Now lets cherry pick only this merge that has changes to the folder which is now in master branch. Assuming latest merge is still the same, run the following command. <br/></p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">git cherry-pick -m 1 &lt;merge-commit-id>\n\n## git cherry-pick -m 1 cf23e3333c222ea40adbb2d2da111b05a00f2f4e</code></pre></div>\n</li>\n</ol>\n<p>That is it. The new branch now contains only the merge changes, which can be handled the same way to do a Pullrequest into the <code class=\"language-text\">release</code> branch.</p>","frontmatter":{"title":"git commands helper","date":"February 01, 2021","description":"","tags":["git"]}}},"pageContext":{"slug":"/Git-helper/","previous":{"fields":{"slug":"/AzureAppService-VNET-Integration-Failure/"},"frontmatter":{"title":"Azure App Service - VNET integration - Locks Subnet"}},"next":{"fields":{"slug":"/AzureVnet-as-markdown/"},"frontmatter":{"title":"Azure Network Solution as a Markdown"}}}},"staticQueryHashes":["2841359383"]}